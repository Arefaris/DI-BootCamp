-- ONE TO ONE: THE PK OF THE PARENT IS THE FK OF THE CHILD
 -- CREATE TABLE scenarios (
--   pk_movie_id INTEGER NOT NULL,
--   scenario_story TEXT NOT NULL,
--   PRIMARY KEY (pk_movie_id),
--   CONSTRAINT fk_movie_id FOREIGN KEY (pk_movie_id) REFERENCES movies (movie_id)
-- );
 -- INSERT into movies(movie_title, movie_story) VALUES
-- ('The Martian', 'lorem lorem lorem'),
-- ('Up in the Air', 'bla bla bla');
 -- SELECT * FROM movies
 -- INSERT into scenarios(pk_movie_id, scenario_story)
-- VALUES
-- ((SELECT movie_id FROM movies where movie_title = 'Up in the Air'),
-- 'Ryan Bingham enjoys living out of a suitcase for his job, 
-- traveling around the country firing people, but finds that lifestyle 
-- threatened by the presence of a potential love interest, and a new hire.'),
-- ((SELECT movie_id FROM movies where movie_title = 'The Martian'),
-- 'In 2035, the crew of the Ares III mission to Mars is exploring 
-- Acidalia Planitia on Martian solar day (sol) 18 of their 31-sol expedition. ');
 -- ONE TO MANY : THE PK ON THE PARENT IS FK OF CHILD AND CAN BE MULTIPLE
 -- CREATE TABLE directors (
--   director_id SERIAL,
--   first_name VARCHAR(30) NOT NULL,
--   last_name VARCHAR(30) NOT NULL,
--   PRIMARY KEY (director_id)
-- );
 -- INSERT INTO directors (first_name, last_name)
-- VALUES
-- ('Gus', 'Van Sant'),
-- ('David', 'Frankel');
 -- ALTER TABLE movies
-- ADD COLUMN director_id INTEGER,
-- ADD CONSTRAINT fk_director FOREIGN KEY (director_id)
-- REFERENCES directors (director_id)
-- ON DELETE SET NULL
-- ON UPDATE CASCADE;
 -- UPDATE movies SET director_id = (SELECT director_id FROM directors WHERE first_name = 'Gus')
-- WHERE movie_title = 'The Martian';
 -- SELECT *
-- FROM movies
 -- MANY TO MANY: A THIRD TABLE (LINKING TABLE OR cross-reference table)
-- IS CREATED TO REPRESENT THE MANY TO MANY RELATIONSHIP
 -- CREATE TABLE actors_movies (
--   actor_id INTEGER NOT NULL,
--   movie_id INTEGER NOT NULL,
--   actor_role VARCHAR(30) NOT NULL,
--   is_lead_role BOOLEAN NOT NULL,
--   PRIMARY KEY (actor_id, movie_id),
--   FOREIGN KEY (actor_id) REFERENCES actors(actor_id) ON DELETE SET NULL ON UPDATE CASCADE,
--   FOREIGN KEY (movie_id) REFERENCES movies(movie_id) ON DELETE SET NULL ON UPDATE CASCADE
-- );
 -- INSERT into actors_movies(actor_id, movie_id, actor_role, is_lead_role) VALUES
-- ((SELECT actor_id FROM actors where first_name = 'George' AND last_name = 'Clooney' ),
-- (SELECT movie_id FROM movies where movie_title = 'Up in the Air'), 'Ryan Bingham', TRUE),
 -- ((SELECT actor_id FROM actors where first_name = 'George' AND last_name = 'Clooney' ),
-- (SELECT movie_id FROM movies where movie_title = 'Oceans Eleven'), 'Danny Ocean', FALSE),
 -- ((SELECT actor_id FROM actors where first_name = 'Matt' AND last_name = 'Damon' ),
-- (SELECT movie_id FROM movies where movie_title = 'Good Will Hunting'),'Will Hunting', TRUE);

SELECT *
FROM actors_movies