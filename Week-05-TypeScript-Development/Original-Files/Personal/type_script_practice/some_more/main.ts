// –¢–µ–º–∞ 1: static –≤ –∫–ª–∞—Å—Å–∞—Ö
// üìò –ß—Ç–æ —Ç–∞–∫–æ–µ static?
// static ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —Å–∞–º–æ–º—É –∫–ª–∞—Å—Å—É, –∞ –Ω–µ –µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º (–æ–±—ä–µ–∫—Ç–∞–º).

// –ö–æ–≥–¥–∞ —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ new, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –æ–±—ã—á–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–∞–º –∫–ª–∞—Å—Å–∞.

// –ê –≤–æ—Ç static-—Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã ‚Äî –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∂–∏–≤—É—Ç –ø—Ä—è–º–æ –≤ –∫–ª–∞—Å—Å–µ, –∞ –Ω–µ –≤ –∫–∞–∂–¥–æ–º –æ–±—ä–µ–∫—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ.

//  –ü—Ä–∏–º–µ—Ä:

class Student {
  static count: number = 0;

  static getCount(): number {
    return Student.count;
  }

  name: string;
  id: number;

  constructor(name: string) {                                                                           
    this.name = name;
    this.id = ++Student.count;                  
  }
}

const std1 = new Student("John");
const std2 = new Student("Anne");
const std3 = new Student("Dan");

// console.log(std1.id); // 1
// console.log(std2.id); // 2
// console.log(std3.id); // 3

// console.log(Student.getCount()); // 3 ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤


// üîç –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
// Student.count ‚Äî –æ–±—â–µ–µ —á–∏—Å–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –∫–ª–∞—Å—Å.

// Student.getCount() ‚Äî –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ (–Ω–µ –æ–±—ä–µ–∫—Ç–∞), –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç count.

// this.id = ++Student.count; ‚Äî –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å—á—ë—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è, –∏ —Å—Ç—É–¥–µ–Ω—Ç—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id.

// ‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:
// –ó–∞–¥–∞–Ω–∏–µ 1:
// –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å Car, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç:

// static totalCars ‚Äî —á–∏—Å–ª–æ –º–∞—à–∏–Ω.

// –ü—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã totalCars —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.

// –ú–µ—Ç–æ–¥ Car.getTotalCars() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω.

class Car{
    static totalCars = 0
    brand: string

    constructor(brand: string){
        this.brand = brand
        Car.totalCars++
    }

    static getTotalCars(){
        return Car.totalCars
    }
}

const car1 = new Car("Toyota")
const car2 = new Car("Mazda")
console.log(Car.getTotalCars()) // 2

//  –¢–µ–º–∞ 2: Index Signature (–ò–Ω–¥–µ–∫—Å–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞)
// üìò –ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?
// –ò–Ω–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç –ø—Ä–∏–Ω–∏–º–∞–ª –ª—é–±—ã–µ –∫–ª—é—á–∏, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∏–º–µ–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞.

// –ù–∞–ø—Ä–∏–º–µ—Ä:


 interface Employe {
   [key: string | number]: string | number;
    name: string;   
    age: number;
    role: string;
 }

// –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
// [key: string | number]: string | number ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç: –≤ –æ–±—ä–µ–∫—Ç–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ª—é–±—ã–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å—Ç—Ä–æ–∫–∞–º–∏ –∏–ª–∏ —á–∏—Å–ª–∞–º–∏, –∏ –∑–Ω–∞—á–µ–Ω–∏—è —É –Ω–∏—Ö ‚Äî —Ç–æ–∂–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–∏—Å–ª–∞.

// –ù–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å name, age, role.

const employee: Employe = {
  name: "John",
  age: 30,
  role: "dev",
  salary: 5000, // –¥–æ–ø—É—Å—Ç–∏–º–æ!
  department: "IT", // –¥–æ–ø—É—Å—Ç–∏–º–æ!
}

// –¶–∏–∫–ª for...in:
// –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º –æ–±—ä–µ–∫—Ç–∞:

for (const key in employee) {
  console.log(key, employee[key]); // –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–ª—é—á
}

interface Book {
    [key: string] : string | number
    title: string,
    author: string,
    year: number
}

const book1: Book = {
    title: "1984",
    author: "George Orwell",
    year: 1949,
    genre: "Dystopian",
    pages: 328
}

for (const key in book1){
    console.log(key, book1[key as keyof Book])
}

//  –ü–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥ –ø–æ —Ç–µ–º–µ Index Signature:
// –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—É –∏–º–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏, –ø–æ–º–∏–º–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —è–≤–Ω–æ.

// –ü–æ–ª–µ–∑–Ω–∞, –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –≤—Å–µ –∫–ª—é—á–∏ –∑–∞—Ä–∞–Ω–µ–µ.

// –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è API-–æ—Ç–≤–µ—Ç–æ–≤, —Ñ–æ—Ä–º –∏ —Ç.–ø.




//üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ "Dynamic Key Access"?
// –û–±—ã—á–Ω–æ —Ç—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –∫ –ø–æ–ª—è–º –æ–±—ä–µ–∫—Ç–∞ —Ç–∞–∫:
// console.log(EmployeJohn.name);
// –ù–æ –∏–Ω–æ–≥–¥–∞ –∏–º—è –ø–æ–ª—è –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∏ —Ç–æ–≥–¥–∞ —Ç—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –≤–æ—Ç —Ç–∞–∫:
// const prop = "name";
// console.log(EmployeJohn[prop]); // <-- –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
// –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?
// –≠—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–ª—é. –û–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞:

// –¢—ã –Ω–µ –∑–Ω–∞–µ—à—å –∑–∞—Ä–∞–Ω–µ–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∫–ª—é—á –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.

// –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –∏–º—è –ø–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã.

// –¢—ã –ø–µ—Ä–µ–±–∏—Ä–∞–µ—à—å –æ–±—ä–µ–∫—Ç –≤ —Ü–∏–∫–ª–µ.

interface Movie {
    title: string,
    year: number,
    rating: number
}

let fieldName = "rating"

const movie1: Movie = {
    title: "Harry potter",
    year: 2001,
    rating: 10
}

console.log(movie1[fieldName as keyof Movie])


/// –ß—Ç–æ —Ç–∞–∫–æ–µ Record –≤ TypeScript?
// –¢–∏–ø Record ‚Äî —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∂–µ–Ω–µ—Ä–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ —Å:

// —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏,

// –∏ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —Ç–∏–ø–æ–º –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π.

// üìò –°–∏–Ω—Ç–∞–∫—Å–∏—Å:
// Record<Keys, Type>

//Keys ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π (string, "name" | "age", number –∏ —Ç.–¥.)

//Type ‚Äî —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞.


type settings = "volume" | "brightness" | "contrast"

type values = Record<settings, number>


let screenSettings: values = {
    volume: 15,
    brightness: 12,
    contrast: 10
}

const settingName = "volume"

console.log(screenSettings[settingName])


//Generics
//  –ß—Ç–æ —Ç–∞–∫–æ–µ Generics?
// Generics –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Ç–∏–ø–æ–≤—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.

// üí¨ –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:

// "–Ø –Ω–µ –∑–Ω–∞—é, —Å –∫–∞–∫–∏–º —Ç–∏–ø–æ–º —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –∫–æ–≥–¥–∞ —É–∑–Ω–∞—é ‚Äî –±—É–¥—É –µ–≥–æ —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—Ç—å."

function echo<T>(value: T): T {
  return value;
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:

echo<string>("hello") // TypeScript –∑–Ω–∞–µ—Ç: —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
echo<number>(123)
// –ú–æ–∂–Ω–æ –∏ –±–µ–∑ <string> ‚Äî TypeScript —Å–∞–º –≤—ã–≤–µ–¥–µ—Ç —Ç–∏–ø:

const a = echo("hi")  // string
const b = echo(42)    // number

//—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 

const reverseArray = <T>(value: T[]): T[]=>{
    return value.reverse()
}

console.log(reverseArray(["a", "b", "c"])) // ‚Üí ["c", "b", "a"]
console.log(reverseArray([1, 2, 3]))       // ‚Üí [3, 2, 1]


interface ApiResponse<T> {
    succes: boolean,
    data: T;
}

const ApiResponse: ApiResponse<string> = {
    succes: true,
    data: "some data"
}

const ApiResponse1: ApiResponse<number[]> = {
    succes: false,
    data: [1,2,3]
}

// –û—Ç–ª–∏—á–Ω–æ! üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –¥–∂–µ–Ω–µ—Ä–∏–∫–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

// –¢—ã —É–∂–µ –≤–∏–¥–µ–ª –ø—Ä–∏–º–µ—Ä:


const mergeArray = <T, K, Z>(arr1: T[], arr2: K[], arr3: Z[]): (T | K | Z)[] => {
  return [...arr1, ...arr2, ...arr3]
}

// üî∑ –ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?
// üìå <T, K, Z>
// –¢—ã —Å–æ–∑–¥–∞—ë—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–ø–æ–≤, –∞ –Ω–µ –æ–¥–∏–Ω:

// T ‚Äî —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

// K ‚Äî —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

// Z ‚Äî —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ—Ç—å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞

// –≠—Ç–æ –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã –≥–æ–≤–æ—Ä–∏–ª:
// ¬´–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç—Ä–µ–º—è –º–∞—Å—Å–∏–≤–∞–º–∏: –æ–¥–∏–Ω —Å —è–±–ª–æ–∫–∞–º–∏ üçé, –¥—Ä—É–≥–æ–π —Å –∞–ø–µ–ª—å—Å–∏–Ω–∞–º–∏ üçä, —Ç—Ä–µ—Ç–∏–π —Å –±–∞–Ω–∞–Ω–∞–º–∏ üçå ‚Äî –∏ –æ–Ω–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤—Å–µ—Ö –≤ –æ–¥–∏–Ω —è—â–∏–∫¬ª.

const combineObjects = <T, K>(obj1: T, obj2: K): T & K=>{
    return {...obj1, ...obj2}
}

const obj1 = { name: "Alice" }
const obj2 = { age: 30 }

const combined = combineObjects(obj1, obj2)
console.log(combined) 


/**
 * Create a function isObj - get a generic type as parameter (arg: T)
 * retrun type { arg, is: true/false}
 */

const isObj = <T>(arg: T)=> {
     if(typeof arg === "object"){
        return {arg, is: true}
     }else {
        return {arg, is: false}
     }
}


console.log(isObj(a))

// ‚úÖ 1. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å–∞—Ö
// static –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–∞–º–æ–º—É –∫–ª–∞—Å—Å—É, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç—É.

// –ü—Ä–∏–º–µ—Ä: —Å—á–∏—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤.

// –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: —Ç—ã —Å–¥–µ–ª–∞–ª Car.getTotalCars() ‚Äî –æ—Ç–ª–∏—á–Ω–æ!

// ‚úÖ 2. Index Signature (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö)
// [key: string]: string | number ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏.

// –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ for...in.

// ‚úÖ 3. Dynamic Key Access
// –ö–æ–≥–¥–∞ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ ‚Äî –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è.

// –ü—Ä–∏–º–µ—Ä: obj[prop as keyof Type]

// ‚úÖ 4. Record —Ç–∏–ø
// Record<K, V> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–ø–æ–º –∑–Ω–∞—á–µ–Ω–∏–π.

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–ª—è volume, brightness, contrast —Å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100.

// ‚úÖ 5. Generics ‚Äî –¥–∂–µ–Ω–µ—Ä–∏–∫–∏
// <T> –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, —Ä–∞–±–æ—Ç–∞—é—â—É—é —Å –ª—é–±—ã–º —Ç–∏–ø–æ–º.

// –ü—Ä–∏–º–µ—Ä: reverseArray<T>(arr: T[]): T[]

// –£ —Ç–µ–±—è —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç —Å—Ç—Ä–∞—Ö–∞ –ø–µ—Ä–µ–¥ <T> üí™

// ‚úÖ 6. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–º
// interface ApiResponse<T> ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ data –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º —Ç–∏–ø–æ–º.

// –ü—Ä–∏–º–µ—Ä: ApiResponse<string>, ApiResponse<number[]>

// ‚úÖ 7. –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤
// <T, K> ‚Äî –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏.

// –ü—Ä–∏–º–µ—Ä: combineObjects<T, K>(obj1: T, obj2: K): T & K

